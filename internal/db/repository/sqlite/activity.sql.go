// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: activity.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createActivity = `-- name: CreateActivity :one
INSERT OR IGNORE INTO raw_activities (
    id, user_id, create_at, start_date, distance, average_speed, moving_time, name, sport_type, max_speed, original_data
) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    RETURNING id
`

type CreateActivityParams struct {
	ID           int64          `json:"id"`
	UserID       int64          `json:"user_id"`
	CreateAt     int64          `json:"create_at"`
	StartDate    int64          `json:"start_date"`
	Distance     float64        `json:"distance"`
	AverageSpeed float64        `json:"average_speed"`
	MovingTime   int64          `json:"moving_time"`
	Name         sql.NullString `json:"name"`
	SportType    string         `json:"sport_type"`
	MaxSpeed     float64        `json:"max_speed"`
	OriginalData sql.NullString `json:"original_data"`
}

func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.ID,
		arg.UserID,
		arg.CreateAt,
		arg.StartDate,
		arg.Distance,
		arg.AverageSpeed,
		arg.MovingTime,
		arg.Name,
		arg.SportType,
		arg.MaxSpeed,
		arg.OriginalData,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}
