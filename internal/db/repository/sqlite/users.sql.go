// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: users.sql

package sqlite

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT OR REPLACE INTO register_users (
    id, user_name, profile_medium, profile, access_token, refresh_token, expired_at
) VALUES ( ?, ?, ?, ?, ?, ?, ?)
    RETURNING id
`

type CreateUserParams struct {
	ID            int64  `json:"id"`
	UserName      string `json:"user_name"`
	ProfileMedium string `json:"profile_medium"`
	Profile       string `json:"profile"`
	AccessToken   string `json:"access_token"`
	RefreshToken  string `json:"refresh_token"`
	ExpiredAt     int64  `json:"expired_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.UserName,
		arg.ProfileMedium,
		arg.Profile,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiredAt,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getToken = `-- name: GetToken :one
SELECT access_token, refresh_token, expired_at FROM register_users
WHERE id = ? LIMIT 1
`

type GetTokenRow struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiredAt    int64  `json:"expired_at"`
}

func (q *Queries) GetToken(ctx context.Context, id int64) (GetTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i GetTokenRow
	err := row.Scan(&i.AccessToken, &i.RefreshToken, &i.ExpiredAt)
	return i, err
}

const updateToken = `-- name: UpdateToken :one
UPDATE register_users
set access_token = ?, refresh_token = ?, expired_at = ?
WHERE id = ?
    RETURNING id
`

type UpdateTokenParams struct {
	AccessToken  string `json:"access_token"`
	RefreshToken string `json:"refresh_token"`
	ExpiredAt    int64  `json:"expired_at"`
	ID           int64  `json:"id"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateToken,
		arg.AccessToken,
		arg.RefreshToken,
		arg.ExpiredAt,
		arg.ID,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE register_users
set active = ?
WHERE id = ?
    RETURNING id
`

type UpdateUserParams struct {
	Active sql.NullInt64 `json:"active"`
	ID     int64         `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.Active, arg.ID)
	var id int64
	err := row.Scan(&id)
	return id, err
}
